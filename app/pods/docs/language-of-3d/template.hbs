<div class="relative px-4 sm:px-6 lg:px-8">
    <Heading @title='The Language of 3D' @subtitle='How to talk to aliens'>
        Understanding the language of 3D is crucial in the field of rendering. While it may not be necessary to
        have a deep understanding of the math involved, not having a solid grasp of the fundamental math could
        hinder your learning. Its essential to build a solid intuition of the operations commonly involved in this
        space.
    </Heading>
    <ProseMarkdown>
        In the previous chapter on {{#link-to 'docs.physics-of-light'}}Physics of Light{{/link-to}}, I mentioned
        light rays, surfaces, normals, and other mathematical concepts that might be foreign to you.

        Surfaces, or planes, represent the absolute smallest renderable component of any object. A plane can be created
        with a minimum of **3** points. A **4th** point is not necessary and not often used as the **4th** point can become non-coplanar
        with the other points. A plane, however, is commonly represented as **2** separate triangles attached at the base.
    </ProseMarkdown>
    <ProseFigure
        @componentName='figures/math/surface'
        @figureId='1'
        @figureCaption='Quad rendered as 2 triangles'
        @props={{hash enableWireframe=true}}
    />
    <ProseMarkdown>
        Most things are modeled with triangles from something as simple as a sheet of paper to even more complex shapes
        like a human being. These polygons (many sides), are individually rendered and in order to do that, we'd need to
        know things about it.

        <ul>
            <li>Is it being viewed by the camera?</li>
            <li>Is it being lit by a light source?</li>
            <li>What color is it?</li>
        </ul>

        In addition we'd need to know some things about the lights in the scene as well as the camera.

        <ul>
            <li>Where is the camera positioned?</li>
            <li>What is the camera's field of view?</li>
            <li>Where is the light positioned?</li>
            <li>What kind of light is it? Directional, point, spot, area light?</li>
        </ul>

        In all these questions, I need to know specific properties related to their position and orientation
        in **3D** space.

        ## Measure

        Building things in real life require taking measurements. There's no way around it, we need math. We often
        measure dimensions of shapes with width, height, depth and positions with **x**, **y**, and **z**. Although our choice of
        **x**, **y**, **z** are often arbitrary and relative to the situation. When I designed my new kitchen, I used the corner
        as my center and measured relative to that. Doing that in a virtual simulation requires we represent those
        **3**-dimensional quanties in a virtual space and a conventional frame of reference needs to be established.

        The **3** values associated with **x**, **y**, and **z** can be group together as a single vector, where a vector represents
        a point in space or a direction. Mathematically, a vector is really just a structure that contains multiple values.

        It's easy to see how a vector can represent points in space. <KatexSpan>\boldsymbol{P} = (1,3,5)</KatexSpan>
        can be read as 1 unit away from the origin in the **X** direction, **3** units in **Y**, **5** units in **Z**.

        Geometrically, you can picture a vector as an arrow with the tail pinned at the origin and the head pinned
        at the vector's <KatexSpan>[v_y, v_y, v_z]</KatexSpan> coordinate. These vectors have a length and direction.

        ## Directions

        Vectors can also be used to describe motion. Velocity is described as a some distance traveled over a unit distance <KatexSpan>\boldsymbol{v} = d/t</KatexSpan>.
        Velocity also measures direction. For instance, falling objects are described with negative velocity.
        Since directionality can be represented with vectors, vectors are a good notation for modeling velocity.

        Directional vectors can be used to position objects, i.e. they describe a translation in **3D** space. They can also
        describe the direction of light, acceleration, the force of gravity, and dimensional axes.
    </ProseMarkdown>
    <ProseFigure
        @componentName='figures/math/directional-vectors'
        @figureId='2'
        @figureCaption='A point in space can also be viewed as a directional vector with the tail pinned at the origin'
    />
    <ProseMarkdown>
        ## Unit vectors

        Directional vectors are used soley to represent direction where length doesn't matter. These vectors can
        be normalized so it's length is always **1**. I previously mentioned that directional vectors can represent an axis in **3D** space.
        What does that mean exactly? Can't we just assume that up is up, down is down, and right is right? Well, when I say it like
        that it's obvious that up should be up but up is relative. Up on Earth is commonly perpendicular to the ground. In order
        to model this in math, we'll have to throw those assumptions away in order to generalize.

        Knowing how to interpet <KatexSpan>(v_x,v_y,v_z)</KatexSpan> coordinates requires we setup a coordinate
        frame. That is, a coordinate system established with a set of axes that identifies the direction each coordinate
        will take. The **x** axis is not necessarily horizontal, nor is **y** necessarily vertical. Some **3D** modeling tools
        use **z** for the vertical dimension. The **2D** coordinate system for css has the **y** axis vertical but inverted.

        The directions these axes face tell us how to align the coordinate points. Directional vectors only need a length
        of *1* to specify a direction. Scaling this vector does not change the direction and so these vectors are mostly
        specified as unit vectors. The axes in a frame commonly established in **3D** are all perpendicular to each other.
        Unit vectors in a coordinate frame are called basis vectors.

        An order pair of numbers like <KatexSpan>(1, 2, 3)</KatexSpan> can be rewritten as a linear combination of the basis vectors. <KatexSpan>\boldsymbol{p} = 1\hat{x} + 2\hat{y} + 3\hat{z}</KatexSpan>
        Each coordinate is a number that is multiplied by their basis vectors. Writing vectors out with <KatexSpan>(v_x, v_y, v_z)</KatexSpan> is just
        shorthand.

        ## Which Way Is Up?

        The coordinate system we use in **3D** is either right-handed or left-handed depending on what API you use. In Math,
        and in OpenGL, right-handed is used. In DirectX, left-handed is used. We'll stick with right-handed systems.

        In right-handed systems, **x** points right, **y** points up, and **z** points towards you.
    </ProseMarkdown>
    <ProseFigure
        @componentName='figures/math/unit-vectors'
        @figureId='3'
        @figureCaption='Right-handed coordinate system'
    />
    <ProseMarkdown>
        ## Vector Notation

        The math world is pretty strict. Vectors can either be expressed in row-major format
        <KatexSpan>[1,2,3]</KatexSpan>
        or column-major <KatexSpan>\begin{bmatrix}1 \\ 2 \\ 3 \end{bmatrix}</KatexSpan>.

        You might see column vectors shown as rows but transposed, meaning flipped so that rows become the columns.
        <KatexSpan>[1,2,3]^T</KatexSpan>.

        This column-major vector format will become more clear in the chapter on transformation.

        ## Surface normals

        Planes are often described with a normal <KatexSpan>\boldsymbol{n}</KatexSpan> and a distance <KatexSpan>d</KatexSpan>.
        The plane normal is a directional vector that descibes the orientation of the plane
        The distance property <KatexSpan>d</KatexSpan> describes how far away this surface is from the origin, along the plane normal.
        In math, a plane is a flat surface that extends to infinity. This surface is the set of all points on the plane a distance <KatexSpan>d</KatexSpan>
        away from the origin and oriented in the normal direction.

        Surface normals are plane normals. They are always perpendicular to the surface. Their origin is always
        assumed to be relative to the surface's origin. They are critical in shading algorithms, collision detection,
        and other angle/distance measurements.
    </ProseMarkdown>
    <ProseFigure
        @componentName='figures/math/surface'
        @figureId='3'
        @figureCaption='Normals are unit vectors pointing straight out from the surface'
        @props={{hash enableNormal=true}}
    />
    <ProseMarkdown>
        ## Describe Our Scene With Vectors

        Let's use vectors to represent some quantities we'd find in a simple scene. A scene comprised of a single triangular
        surface and one light source. Here's what we need.

        A triangle is made up of *3* points <KatexSpan> \triangle{ABC}</KatexSpan>. Let's call those points <KatexSpan>\boldsymbol{A}</KatexSpan>, <KatexSpan>\boldsymbol{B}</KatexSpan>, and <KatexSpan>\boldsymbol{C}</KatexSpan>.

        <KatexBlock>
            \boldsymbol{A} = ( -0.5,-0.5,0 )^T\\
            \boldsymbol{B} = ( 0.5,0,0 )^T\\
            \boldsymbol{C} = ( 0,0.5,0 )^T
        </KatexBlock>

        Let's assume the triangles is modeled in a separate space where the origin is the center of the triangle. Positioning this triangle in the world
        would require another position. Let's call this <KatexSpan>\boldsymbol{T}</KatexSpan>;

        <KatexBlock>
            \triangle{ABC'} = \triangle{ABC} + \boldsymbol{T}\\

            \boldsymbol{A'} = \boldsymbol{A} + \boldsymbol{T}\\
            \boldsymbol{B'} = \boldsymbol{B} + \boldsymbol{T}\\
            \boldsymbol{C'} = \boldsymbol{C} + \boldsymbol{T}
        </KatexBlock>
        This triangle needs one more vector. The surface normal. Let's call this <KatexSpan>\boldsymbol{n}</KatexSpan>. Let's make <KatexSpan>\boldsymbol{n}</KatexSpan> point directly up.

        <KatexBlock>
            \boldsymbol{n} = [ 0,1,0 ]^T
        </KatexBlock>

        The light is a directional light source. This light only emits light in one direction. The sun can be modeled as a
        directional light source. It's far enough away, the rays are close to parallel when reaching Earth. Since the
        rays are parallel, a light position isn't necessary, only direction is. Let's call this direction <KatexSpan>\boldsymbol{l}</KatexSpan> that points directly towards the noon-day sun.

        <KatexBlock>
            \boldsymbol{l} = [ 0,1,0 ]^T
        </KatexBlock>

        It should be clear, without much math skills, where things are positioned. Here's a visual example of the scene
        described above.
    </ProseMarkdown>
    <ProseFigure
        @componentName='figures/math/simple-triangle'
        @figureId='4'
        @figureCaption='Triangle modeled at (0,0,0) then translated by (0, 1, 0) with a normal pointing up. Source code accompanies this so check it out if you are interested on how this scene was setup.'
        @props={{hash enableNormal=true}}
    />
</div>