<div class="relative px-4 sm:px-6 lg:px-8">
    <Heading @title='Going Beyond the Basics' @subtitle='Creating Art with Mathematics'>
        Learning to create art with math is a difficult skill to learn. It's not an additive process like
        paiting on a canvas. It's a much more analytical process where the focus is on the life of a single
        pixel and all possible values it might take.
    </Heading>
    <ProseMarkdown>
        ## Color

        Colors in computers are represented as **RGB** triplets, 3 independent color channels who's values range from 0 to 1. This
        is how our eyes see. We have cones in our eyes that are sensitive to red, green, and blue and it's their combination
        that gives us all the different colors.

        Working with colors as numbers can be unintuitive to how we visualize color, especially if your only experience
        with color is through color pigment. With practice, it'll become easier but here are some tips that can help you develop
        some intuition.

        Remember these letters and in this particular order. They represents colors found on a rainbow: **R Y G B V**

        Each shade of color can be represented with these **RGB** values, more or less.

        **Red**: (1, 0, 0)<br />
        **Yellow**: (1, 1, 0)<br />
        **Green**: (0, 1, 0)<br />
        **Blue**: (0, 0, 1)<br />
        **Violet**: (1, 0, 1)<br />

        The gamut of colors produced by the **RGB** color space can range from red to blue. Most people would choose to visualize
        this with the visible color spectrum.
    </ProseMarkdown>
    <ProseFigure
        @figureId='1'
        @figureCaption='Visible light spectrum'
        @componentName='figures/beyond-basics/color-spectrum'
    />
    <ProseMarkdown>
        Starting with red, lets say you wanted to shift the color tint to the right of the spectrum. Start adding some green.

        **orange = (1.0, 0.5, 0)**

        Even further, you'd get yellow. Lose the red and add blue and you'd get cyan.

        **cyan = (0, 1.0, 1.0)**

        These colors are super bright. You can tone down the brightness by scaling it down. For example, if you want red but half
        as bright, you'd multiply the color by 0.5.

        **less red = (0.5, 0, 0)**

        Let's try another color, orange.

        **less orange = (0.5, 0.25, 0)**

        Notice that scaling the components keep the component
        proportions the same. You can increase brightness by multiplying by a number larger than 1 or dividing by a percentage.

        NOTE: *You cannot increase the brightness anymore higher then 1. Multiplying (1.0, 0.5, 0) by 2 will result in (2.0, 1, 0) which is not a valid range. Clamping the value back to 1 doesn't clamp the brightness. It'll give you a different color (1, 1, 0), which is yellow. We'll see later how to increase brightness without this shortcoming*.
    </ProseMarkdown>
    <ProseFigure
        @figureId='2'
        @figureCaption='Play around with the brightness parameter'
        @componentName='figures/beyond-basics/color-brightness'
    />
    <ProseMarkdown>
        We can change the color tint and the brightness, the next thing we can adjust is the saturation, how vibrant or muddy the
        color is. Painters often add white to desaturate a color. The color becomes lighter, not brighter. It can make it look
        more grey or muddier.

        Achieving this is not straightforward. The goal is to adjust the other components to achieve white, all channels being 1.
        For example, for the color red **(1, 0, 0)**, you'd adjust the g and b channels in equal amounts. For yellow **(1, 1, 0)**, we'd
        adjust the blue.

        Let's formally introduce the **GLSL** vector types. **vec2**, **vec3**, **vec4**. We've seen how to create a **vec** before, and there's
        not much to it. You can access the components with **x,y,z,w** or **rgba** or **stpq**. **vec.x** returns a single float, **vec.xy**
        returns a **vec2**. You can also return it in a different order. **vec2 someVec = otherVec.yx**. This is called swizzling.
    </ProseMarkdown>
    <ProseFigure
        @figureId='3'
        @figureCaption='Saturation displayed gradually. Try a different tint like yellow. Which channel would you need to change to affect saturation.'
        @componentName='figures/beyond-basics/color-saturation'
    />
    <ProseMarkdown>
        ### HSB

        We've casually introduced the concept of hue, saturation, and brightness. This color space is just more intuitive
        and sometimes it's more helpful to work in **HSB**. It's definitely an option to work in **HSB** then convert to **RGB**. The formula
        is not intuitive to understand but you can see it working in the next example.
    </ProseMarkdown>
    <ProseFigure
        @figureId='3'
        @figureCaption='Mapping HSV color space onto a plane'
        @componentName='figures/beyond-basics/color-hsb'
    />
    <ProseMarkdown>
        ### Blending

        You can blend two colors given a factor. In **GLSL**, you can use the built-in function **mix** which interpolate between
        two values. The factor is a percentage value (0-1). If you've ever used photoshop or other painting/composition
        software, blending is exactly like working with layers.
    </ProseMarkdown>
    <ProseFigure
        @figureId='4'
        @figureCaption='Mixing can be used to blend multiple colors together or stack them on top of each other like layers'
        @componentName='figures/beyond-basics/mixing-colors'
    />
    <ProseMarkdown>
        ## Mathematical Modeling

        Blending colors is one thing, creating art is another thing. You might not be surprised to find out that math has its
        place in art, just like any other field. The art of perspective drawing is deeply rooted in geometrical principles.
        Painting requires observational skills and intuition but good intuition is built from strong fundamentals. Creating
        art with code is no different. The language is different but art requires imagination and creativity.

        Those graph functions you learned in high-school algebra will play an important part here. You know, the ones with
        <KatexSpan>y = mx + b</KatexSpan> or <KatexSpan>y = log(x)</KatexSpan>. We're going to see those being used here. If you have no idea what those are, then thats
        fine. This should be a gental introduction to this topic.

        ### One-dimensional Functions

        A math function is just an expression that can be reused. A function on one variable is 1-dimensional. You often
        hear this variable being called the independent variable and the output of the function being the dependent variable. That
        just means that the input variable can vary independently of any other variable while the output is dependent on
        the input variable.

        Plotting the values these variables take is a common way to visualize the behavior of the function. Normally, **x**
        is used for the input, and **y** is used for the output. Running through the expression over multiple values of **x**
        will give you a plot on a **2D** plane.

        Without graphing these values, it's hard to see how the **y** value changes over the change in **x**. If I gave you
        <KatexSpan>f(x) = {5 \over 3x} + 2</KatexSpan> can you visualize how the shape of **y** is going to look. Does it get bigger? How fast does it ascend?
        When will this value approach 10? You can solve this analytically, or you can graph it. Graphing helps you see
        how the numbers move and how they relate. You can even make predictions from this.
    </ProseMarkdown>
    <ProseFigure
        @figureId='5'
        @figureCaption='Graphing allows us to see the problem space more clearly. From graphing this, you would know that this is a linear equation. It is a steep slope to the right and approach 10 around x~=5. Plugging in 10 for y and solving for x will give you 4.8 so we were around the ballpark.'
        @imageUrl={{root-url 'figures/graphing-functions.png'}}
    />
    <ProseMarkdown>
        Let's create another linear equation <KatexSpan>y=x^2</KatexSpan>. In all these examples, we're using the uv coordinates as inputs in
        our functions. We're using these coordinates because in most cases they are in a normalizd ranged between 0 and 1.
        In this example, I'm mapping the **uv.x** to the **x** in the function <KatexSpan>y=x^2</KatexSpan>. The **y** value, the output, will be used as
        the color for all channels which will make it a grayscale image. The plot of that function creates a parabola. Can
        you guess what this image would look like. Uncomment the corresponding function in this example to see the answer.
    </ProseMarkdown>
    <ProseFigure
        @figureId='6'
        @figureCaption='A beautiful parabola'
        @imageUrl={{root-url 'figures/parabola.png'}}
    />
    <ProseFigure
        @figureId='7'
        @figureCaption='Basic math functions'
        @componentName='figures/beyond-basics/basic-functions'
    />
    <ProseMarkdown>
        I hope your guess was correct. The mapping of values from those one-dimensional math functions should provide some
        insight into what they're doing. If it isn't obvious yet, just know that the **y** value gets mapped to brightness when
        used as a grayscale. Since the value of **y** wasn't held constant, the brightness wasn't held constant. For the <KatexSpan>x^2</KatexSpan>,
        transition was exponential.

        ### Smoothstep/Step

        Crafting polynomials isn't the only way to create gradients. You can use **smoothstep** to smoothly transition between
        two values. If you looked at the blending example using circles, **smoothstep** was used to create the edge. For a
        harder edge, you can use **step**.
    </ProseMarkdown>
    <ProseFigure
        @figureId='8'
        @figureCaption='Step functions'
        @componentName='figures/beyond-basics/step-functions'
    />
    <ProseMarkdown>
        ### Trigonometric functions

        Another useful function is **sin** and **cos**. They're cyclic functions that smoothly transitions between -1 and 1. Use
        them for things that require repetition, or are cicular in nature.
    </ProseMarkdown>
    <ProseFigure
        @figureId='8'
        @figureCaption='Trigonmetric functions'
        @componentName='figures/beyond-basics/trig-functions'
    />
    <ProseMarkdown>
        We can even animate if we have a uniform that changes over time.
    </ProseMarkdown>
    <ProseFigure
        @figureId='8'
        @figureCaption='Animation'
        @componentName='figures/beyond-basics/animated-functions'
    />
    <ProseMarkdown>
        ## Further Reading

        If this little tutorial interests you, there are several resources online you can use to help you master this skill.

        * [Book of Shader](http://thebookofshaders.com)
        * [Ronja Tutorials](http://ronja-tutorials.com)
        * [ShaderToy](http://shadertoy.com)
    </ProseMarkdown>
</div>